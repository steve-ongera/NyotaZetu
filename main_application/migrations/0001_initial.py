# Generated by Django 5.2.4 on 2025-10-23 22:00

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BursaryCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('category_type', models.CharField(choices=[('highschool', 'High School'), ('special_school', 'Special School'), ('college', 'College'), ('university', 'University'), ('technical', 'Technical/Vocational'), ('freshers', 'University Freshers'), ('merit', 'Merit-Based'), ('needy', 'Extremely Needy'), ('orphan', 'Orphan/Vulnerable')], max_length=20)),
                ('allocation_amount', models.DecimalField(decimal_places=2, help_text='Budget for this category', max_digits=12)),
                ('max_amount_per_applicant', models.DecimalField(decimal_places=2, help_text='Maximum bursary per student in this category', max_digits=10)),
                ('min_amount_per_applicant', models.DecimalField(decimal_places=2, default=5000, help_text='Minimum bursary per student', max_digits=10)),
                ('target_beneficiaries', models.PositiveIntegerField(blank=True, help_text='Target number of beneficiaries', null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'Bursary Categories',
                'ordering': ['fiscal_year', 'category_type'],
            },
        ),
        migrations.CreateModel(
            name='Constituency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=10)),
                ('current_mp', models.CharField(blank=True, max_length=200, null=True)),
                ('mp_party', models.CharField(blank=True, max_length=100, null=True)),
                ('cdf_office_location', models.CharField(blank=True, max_length=200, null=True)),
                ('cdf_office_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('cdf_office_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('annual_cdf_allocation', models.DecimalField(decimal_places=2, default=0, help_text='Total annual NG-CDF allocation', max_digits=12)),
                ('cdf_bursary_allocation', models.DecimalField(decimal_places=2, default=0, help_text='NG-CDF bursary allocation (usually 35% of total CDF)', max_digits=12)),
                ('population', models.PositiveIntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'Constituencies',
                'ordering': ['county', 'name'],
            },
        ),
        migrations.CreateModel(
            name='County',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('headquarters', models.CharField(blank=True, max_length=100, null=True)),
                ('population', models.PositiveIntegerField(blank=True, null=True)),
                ('governor_name', models.CharField(blank=True, max_length=200, null=True)),
                ('county_website', models.URLField(blank=True, null=True)),
                ('treasury_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('treasury_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('education_cec_name', models.CharField(blank=True, max_length=200, null=True)),
                ('education_office_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('education_office_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Counties',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DisbursementRound',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round_number', models.PositiveIntegerField()),
                ('name', models.CharField(max_length=100)),
                ('application_start_date', models.DateField()),
                ('application_end_date', models.DateField()),
                ('review_deadline', models.DateField()),
                ('disbursement_date', models.DateField()),
                ('allocated_amount', models.DecimalField(decimal_places=2, help_text='Amount allocated for this round', max_digits=12)),
                ('disbursed_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('is_open', models.BooleanField(default=False)),
                ('is_completed', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['fiscal_year', 'round_number'],
            },
        ),
        migrations.CreateModel(
            name='FAQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=500)),
                ('answer', models.TextField()),
                ('category', models.CharField(choices=[('general', 'General'), ('eligibility', 'Eligibility'), ('application', 'Application Process'), ('documents', 'Required Documents'), ('disbursement', 'Disbursement'), ('technical', 'Technical Support')], default='general', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'FAQ',
                'verbose_name_plural': 'FAQs',
                'ordering': ['category', 'order', 'question'],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('population', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ['ward', 'name'],
            },
        ),
        migrations.CreateModel(
            name='LoginAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=150)),
                ('ip_address', models.GenericIPAddressField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('success', models.BooleanField(default=False)),
                ('user_agent', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('applicant', 'Applicant'), ('admin', 'Administrator'), ('reviewer', 'Application Reviewer'), ('finance', 'Finance Officer'), ('county_admin', 'County Administrator'), ('constituency_admin', 'Constituency Administrator'), ('ward_admin', 'Ward Administrator')], default='applicant', max_length=25)),
                ('id_number', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+254XXXXXXXXX'. Exactly 12 digits including country code.", regex='^\\+254\\d{9}$')])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AccountLock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('locked_at', models.DateTimeField(auto_now_add=True)),
                ('failed_attempts', models.PositiveIntegerField(default=0)),
                ('last_attempt_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('unlock_time', models.DateTimeField(blank=True, null=True)),
                ('is_locked', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='account_lock', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('announcement_type', models.CharField(choices=[('general', 'General'), ('deadline', 'Deadline'), ('disbursement', 'Disbursement'), ('maintenance', 'System Maintenance'), ('urgent', 'Urgent')], default='general', max_length=20)),
                ('published_date', models.DateTimeField()),
                ('expiry_date', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('target_audience', models.CharField(choices=[('all', 'All Users'), ('applicants', 'Applicants Only'), ('staff', 'Staff Only')], default='all', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-published_date'],
            },
        ),
        migrations.CreateModel(
            name='Applicant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1)),
                ('date_of_birth', models.DateField()),
                ('id_number', models.CharField(max_length=20, unique=True)),
                ('physical_address', models.TextField()),
                ('postal_address', models.CharField(blank=True, max_length=100, null=True)),
                ('special_needs', models.BooleanField(default=False)),
                ('special_needs_description', models.TextField(blank=True, null=True)),
                ('profile_picture', models.ImageField(blank=True, default='profile_pics/default.png', null=True, upload_to='profile_pics/')),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='applicant_profile', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_applicants', to=settings.AUTH_USER_MODEL)),
                ('constituency', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.constituency')),
                ('county', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.county')),
                ('location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.location')),
            ],
            options={
                'ordering': ['user__last_name', 'user__first_name'],
            },
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('application_number', models.CharField(editable=False, max_length=20, unique=True)),
                ('bursary_source', models.CharField(choices=[('county', 'County Bursary'), ('cdf', 'NG-CDF Bursary'), ('both', 'Both County and CDF')], default='county', help_text='Which bursary fund to apply from', max_length=10)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('under_review', 'Under Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('disbursed', 'Disbursed'), ('pending_documents', 'Pending Documents')], default='draft', max_length=20)),
                ('admission_number', models.CharField(max_length=100)),
                ('year_of_study', models.PositiveIntegerField()),
                ('course_name', models.CharField(blank=True, max_length=200, null=True)),
                ('expected_completion_date', models.DateField()),
                ('previous_academic_year_average', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('total_fees_payable', models.DecimalField(decimal_places=2, max_digits=10)),
                ('fees_paid', models.DecimalField(decimal_places=2, max_digits=10)),
                ('fees_balance', models.DecimalField(decimal_places=2, max_digits=10)),
                ('amount_requested', models.DecimalField(decimal_places=2, max_digits=10)),
                ('other_bursaries', models.BooleanField(default=False)),
                ('other_bursaries_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('other_bursaries_source', models.CharField(blank=True, max_length=200, null=True)),
                ('is_orphan', models.BooleanField(default=False)),
                ('is_total_orphan', models.BooleanField(default=False)),
                ('is_disabled', models.BooleanField(default=False)),
                ('has_chronic_illness', models.BooleanField(default=False)),
                ('chronic_illness_description', models.TextField(blank=True, null=True)),
                ('number_of_siblings', models.PositiveIntegerField(default=0)),
                ('number_of_siblings_in_school', models.PositiveIntegerField(default=0)),
                ('household_monthly_income', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('date_submitted', models.DateTimeField(blank=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('has_received_previous_allocation', models.BooleanField(default=False)),
                ('previous_allocation_year', models.CharField(blank=True, max_length=20, null=True)),
                ('previous_allocation_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('priority_score', models.DecimalField(decimal_places=2, default=0, help_text='Calculated priority score for ranking', max_digits=5)),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applications', to='main_application.applicant')),
                ('bursary_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.bursarycategory')),
                ('disbursement_round', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.disbursementround')),
            ],
            options={
                'ordering': ['-date_submitted'],
            },
        ),
        migrations.CreateModel(
            name='Allocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount_allocated', models.DecimalField(decimal_places=2, max_digits=10)),
                ('allocation_date', models.DateField(auto_now_add=True)),
                ('cheque_number', models.CharField(blank=True, max_length=50, null=True)),
                ('payment_method', models.CharField(choices=[('cheque', 'Cheque'), ('bank_transfer', 'Bank Transfer'), ('mpesa', 'M-Pesa'), ('bulk_cheque', 'Bulk Cheque')], default='cheque', max_length=20)),
                ('is_disbursed', models.BooleanField(default=False)),
                ('disbursement_date', models.DateField(blank=True, null=True)),
                ('is_received_by_institution', models.BooleanField(default=False)),
                ('institution_confirmation_date', models.DateField(blank=True, null=True)),
                ('institution_receipt_number', models.CharField(blank=True, max_length=50, null=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('approved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approvals', to=settings.AUTH_USER_MODEL)),
                ('disbursed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='disbursements', to=settings.AUTH_USER_MODEL)),
                ('application', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='allocation', to='main_application.application')),
            ],
            options={
                'ordering': ['-allocation_date'],
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('create', 'Create'), ('update', 'Update'), ('delete', 'Delete'), ('view', 'View'), ('approve', 'Approve'), ('reject', 'Reject'), ('disburse', 'Disburse'), ('login', 'Login'), ('logout', 'Logout'), ('export', 'Export Data'), ('print', 'Print Document')], max_length=20)),
                ('table_affected', models.CharField(max_length=100)),
                ('record_id', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.TextField()),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('old_values', models.JSONField(blank=True, null=True)),
                ('new_values', models.JSONField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='BeneficiaryTestimonial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('testimonial_text', models.TextField()),
                ('photo', models.ImageField(blank=True, null=True, upload_to='testimonials/')),
                ('is_approved', models.BooleanField(default=False)),
                ('is_featured', models.BooleanField(default=False)),
                ('submitted_date', models.DateTimeField(auto_now_add=True)),
                ('approval_date', models.DateTimeField(blank=True, null=True)),
                ('allocation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.allocation')),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='testimonials', to='main_application.applicant')),
                ('approved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_testimonials', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-submitted_date'],
            },
        ),
        migrations.CreateModel(
            name='BulkCheque',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cheque_number', models.CharField(max_length=50, unique=True)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('student_count', models.PositiveIntegerField()),
                ('cheque_holder_name', models.CharField(max_length=200)),
                ('cheque_holder_id', models.CharField(max_length=20)),
                ('cheque_holder_phone', models.CharField(max_length=20)),
                ('cheque_holder_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('cheque_holder_position', models.CharField(max_length=100)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('assigned_date', models.DateTimeField(blank=True, null=True)),
                ('is_collected', models.BooleanField(default=False)),
                ('collection_date', models.DateTimeField(blank=True, null=True)),
                ('collector_id_number', models.CharField(blank=True, max_length=20, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('assigned_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_bulk_cheques', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_bulk_cheques', to=settings.AUTH_USER_MODEL)),
                ('disbursement_round', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.disbursementround')),
            ],
            options={
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='BulkChequeAllocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_notified', models.BooleanField(default=False)),
                ('notification_sent_date', models.DateTimeField(blank=True, null=True)),
                ('allocation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='bulk_cheque_allocation', to='main_application.allocation')),
                ('bulk_cheque', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='allocations', to='main_application.bulkcheque')),
            ],
        ),
        migrations.AddField(
            model_name='constituency',
            name='county',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='constituencies', to='main_application.county'),
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(choices=[('id_card', 'National ID Card'), ('birth_certificate', 'Birth Certificate'), ('admission_letter', 'Admission Letter'), ('fee_structure', 'Fee Structure'), ('fee_statement', 'Fee Statement / Balance'), ('academic_results', 'Academic Results / Transcript'), ('parent_id', 'Parent/Guardian ID'), ('death_certificate', 'Death Certificate'), ('medical_report', 'Medical Report'), ('disability_certificate', 'Disability Certificate'), ('chiefs_letter', "Chief's Recommendation Letter"), ('mca_letter', 'MCA Recommendation Letter'), ('pastor_letter', 'Religious Leader Letter'), ('school_leaving_cert', 'School Leaving Certificate'), ('other', 'Other Document')], max_length=30)),
                ('file', models.FileField(upload_to='bursary_documents/%Y/%m/')),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='main_application.application')),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_documents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='EmailLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_address', models.EmailField(max_length=254)),
                ('subject', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('delivered', 'Delivered'), ('bounced', 'Bounced'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('has_attachments', models.BooleanField(default=False)),
                ('attachment_count', models.PositiveIntegerField(default=0)),
                ('recipient', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='emails', to=settings.AUTH_USER_MODEL)),
                ('related_application', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.application')),
            ],
            options={
                'ordering': ['-sent_at'],
            },
        ),
        migrations.CreateModel(
            name='FiscalYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('total_county_budget', models.DecimalField(decimal_places=2, help_text='Total county budget for the year', max_digits=15)),
                ('education_budget', models.DecimalField(decimal_places=2, help_text='Education sector allocation', max_digits=15)),
                ('total_bursary_allocation', models.DecimalField(decimal_places=2, help_text='Total county bursary allocation for the year', max_digits=12)),
                ('equitable_share', models.DecimalField(decimal_places=2, default=0, help_text='Equitable share from National Treasury', max_digits=15)),
                ('conditional_grants', models.DecimalField(decimal_places=2, default=0, help_text='Conditional allocations from National Treasury', max_digits=15)),
                ('number_of_disbursement_rounds', models.PositiveIntegerField(default=2, help_text='How many times bursaries are disbursed per year (e.g., 2, 4, or 5)')),
                ('is_active', models.BooleanField(default=False)),
                ('application_open', models.BooleanField(default=False)),
                ('application_deadline', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('county', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fiscal_years', to='main_application.county')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.AddField(
            model_name='disbursementround',
            name='fiscal_year',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='disbursement_rounds', to='main_application.fiscalyear'),
        ),
        migrations.AddField(
            model_name='bursarycategory',
            name='fiscal_year',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='main_application.fiscalyear'),
        ),
        migrations.AddField(
            model_name='bulkcheque',
            name='fiscal_year',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.fiscalyear'),
        ),
        migrations.AddField(
            model_name='application',
            name='fiscal_year',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.fiscalyear'),
        ),
        migrations.CreateModel(
            name='AIAnalysisReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_type', models.CharField(choices=[('allocation_prediction', 'Allocation Prediction'), ('demand_forecast', 'Demand Forecast'), ('budget_analysis', 'Budget Analysis'), ('performance_trend', 'Performance Trend Analysis'), ('geographic_analysis', 'Geographic Distribution Analysis'), ('institution_analysis', 'Institution-based Analysis'), ('equity_analysis', 'Equity & Fairness Analysis')], max_length=30)),
                ('title', models.CharField(max_length=200)),
                ('analysis_data', models.JSONField()),
                ('predictions', models.JSONField(blank=True, null=True)),
                ('recommendations', models.JSONField(blank=True, null=True)),
                ('generated_date', models.DateTimeField(auto_now_add=True)),
                ('accuracy_score', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True)),
                ('confidence_level', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('report_file', models.FileField(blank=True, null=True, upload_to='ai_reports/%Y/%m/')),
                ('is_archived', models.BooleanField(default=False)),
                ('generated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('fiscal_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_reports', to='main_application.fiscalyear')),
            ],
            options={
                'ordering': ['-generated_date'],
            },
        ),
        migrations.CreateModel(
            name='Guardian',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('relationship', models.CharField(choices=[('father', 'Father'), ('mother', 'Mother'), ('guardian', 'Legal Guardian'), ('grandfather', 'Grandfather'), ('grandmother', 'Grandmother'), ('uncle', 'Uncle'), ('aunt', 'Aunt'), ('sibling', 'Sibling'), ('other', 'Other Relative')], max_length=20)),
                ('phone_number', models.CharField(max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('id_number', models.CharField(blank=True, max_length=20, null=True)),
                ('employment_status', models.CharField(choices=[('employed', 'Formally Employed'), ('self_employed', 'Self Employed'), ('casual', 'Casual Laborer'), ('unemployed', 'Unemployed'), ('retired', 'Retired'), ('deceased', 'Deceased')], max_length=20)),
                ('occupation', models.CharField(blank=True, max_length=200, null=True)),
                ('employer', models.CharField(blank=True, max_length=200, null=True)),
                ('monthly_income', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('is_primary_contact', models.BooleanField(default=False)),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='guardians', to='main_application.applicant')),
            ],
            options={
                'ordering': ['applicant', '-is_primary_contact'],
            },
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('institution_type', models.CharField(choices=[('highschool', 'High School'), ('special_school', 'Special School'), ('college', 'College'), ('university', 'University'), ('technical_institute', 'Technical Institute')], max_length=20)),
                ('sub_county', models.CharField(blank=True, max_length=100, null=True)),
                ('postal_address', models.CharField(blank=True, max_length=100, null=True)),
                ('physical_address', models.TextField(blank=True, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('principal_name', models.CharField(blank=True, max_length=200, null=True)),
                ('principal_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('principal_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('bank_name', models.CharField(blank=True, max_length=100, null=True)),
                ('bank_branch', models.CharField(blank=True, max_length=100, null=True)),
                ('account_number', models.CharField(blank=True, max_length=50, null=True)),
                ('account_name', models.CharField(blank=True, max_length=200, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('county', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='institutions', to='main_application.county')),
            ],
            options={
                'ordering': ['institution_type', 'name'],
            },
        ),
        migrations.AddField(
            model_name='bulkcheque',
            name='institution',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bulk_cheques', to='main_application.institution'),
        ),
        migrations.AddField(
            model_name='application',
            name='institution',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.institution'),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('application_status', 'Application Status'), ('document_request', 'Document Request'), ('allocation', 'Allocation'), ('disbursement', 'Disbursement'), ('review_comment', 'Review Comment'), ('deadline', 'Deadline Reminder'), ('system', 'System Notification')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('related_application', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.application')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PredictionModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('model_type', models.CharField(choices=[('demand_forecasting', 'Demand Forecasting'), ('allocation_optimization', 'Allocation Optimization'), ('success_prediction', 'Academic Success Prediction'), ('geographic_clustering', 'Geographic Clustering'), ('fraud_detection', 'Fraud Detection')], max_length=30)),
                ('version', models.CharField(default='1.0', max_length=10)),
                ('model_parameters', models.JSONField()),
                ('feature_importance', models.JSONField(blank=True, null=True)),
                ('accuracy', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True)),
                ('precision', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True)),
                ('recall', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True)),
                ('f1_score', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True)),
                ('training_data_size', models.PositiveIntegerField(blank=True, null=True)),
                ('training_date', models.DateTimeField(auto_now_add=True)),
                ('last_retrained', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-training_date'],
            },
        ),
        migrations.CreateModel(
            name='PublicReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('report_type', models.CharField(choices=[('annual', 'Annual Report'), ('quarterly', 'Quarterly Report'), ('beneficiaries', 'Beneficiaries List'), ('budget_utilization', 'Budget Utilization'), ('ward_distribution', 'Ward Distribution'), ('institution_distribution', 'Institution Distribution')], max_length=30)),
                ('period_covered', models.CharField(max_length=100)),
                ('summary', models.TextField()),
                ('report_file', models.FileField(upload_to='public_reports/%Y/')),
                ('published_date', models.DateTimeField(auto_now_add=True)),
                ('is_published', models.BooleanField(default=False)),
                ('download_count', models.PositiveIntegerField(default=0)),
                ('fiscal_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.fiscalyear')),
                ('published_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-published_date'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review_level', models.CharField(choices=[('ward', 'Ward Committee Review'), ('constituency', 'Constituency Review'), ('county', 'County Review'), ('final', 'Final Approval')], default='ward', max_length=20)),
                ('comments', models.TextField()),
                ('recommendation', models.CharField(choices=[('approve', 'Approve'), ('reject', 'Reject'), ('more_info', 'Request More Information'), ('forward', 'Forward to Next Level')], max_length=50)),
                ('recommended_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('need_score', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('merit_score', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('vulnerability_score', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('review_date', models.DateTimeField(auto_now_add=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='main_application.application')),
                ('reviewer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-review_date'],
            },
        ),
        migrations.CreateModel(
            name='SecurityNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('failed_login', 'Failed Login Attempt'), ('account_locked', 'Account Locked'), ('tfa_code', '2FA Code'), ('successful_login', 'Successful Login'), ('account_unlocked', 'Account Unlocked')], max_length=20)),
                ('ip_address', models.GenericIPAddressField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('message', models.TextField()),
                ('email_sent', models.BooleanField(default=False)),
                ('email_sent_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='security_notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SiblingInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('age', models.PositiveIntegerField()),
                ('education_level', models.CharField(max_length=100)),
                ('school_name', models.CharField(blank=True, max_length=200, null=True)),
                ('is_in_school', models.BooleanField(default=True)),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='siblings', to='main_application.applicant')),
            ],
        ),
        migrations.CreateModel(
            name='SMSLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(max_length=20)),
                ('message', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('delivered', 'Delivered'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('delivery_status', models.CharField(blank=True, max_length=20, null=True)),
                ('delivery_time', models.DateTimeField(blank=True, null=True)),
                ('gateway_message_id', models.CharField(blank=True, max_length=100, null=True)),
                ('gateway_response', models.TextField(blank=True, null=True)),
                ('cost', models.DecimalField(decimal_places=2, default=0, max_digits=6)),
                ('recipient', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sms_messages', to=settings.AUTH_USER_MODEL)),
                ('related_application', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.application')),
            ],
            options={
                'ordering': ['-sent_at'],
            },
        ),
        migrations.CreateModel(
            name='SubLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sublocations', to='main_application.location')),
            ],
            options={
                'ordering': ['location', 'name'],
                'unique_together': {('name', 'location')},
            },
        ),
        migrations.AddField(
            model_name='applicant',
            name='sublocation',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.sublocation'),
        ),
        migrations.CreateModel(
            name='SystemSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('setting_name', models.CharField(max_length=100, unique=True)),
                ('setting_category', models.CharField(choices=[('general', 'General'), ('application', 'Application'), ('finance', 'Finance'), ('notification', 'Notification'), ('security', 'Security')], default='general', max_length=20)),
                ('setting_value', models.TextField()),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['setting_category', 'setting_name'],
            },
        ),
        migrations.CreateModel(
            name='TwoFactorCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=7)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('used', models.BooleanField(default=False)),
                ('used_at', models.DateTimeField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('session_key', models.CharField(max_length=40)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tfa_codes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Village',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('village_elder', models.CharField(blank=True, max_length=200, null=True)),
                ('elder_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('sublocation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='villages', to='main_application.sublocation')),
            ],
            options={
                'ordering': ['sublocation', 'name'],
                'unique_together': {('name', 'sublocation')},
            },
        ),
        migrations.AddField(
            model_name='applicant',
            name='village',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.village'),
        ),
        migrations.CreateModel(
            name='Ward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(blank=True, max_length=10, null=True)),
                ('current_mca', models.CharField(blank=True, max_length=200, null=True)),
                ('mca_party', models.CharField(blank=True, max_length=100, null=True)),
                ('mca_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('mca_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('ward_office_location', models.CharField(blank=True, max_length=200, null=True)),
                ('population', models.PositiveIntegerField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('constituency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wards', to='main_application.constituency')),
            ],
            options={
                'ordering': ['constituency', 'name'],
                'unique_together': {('name', 'constituency')},
            },
        ),
        migrations.AddField(
            model_name='location',
            name='ward',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='main_application.ward'),
        ),
        migrations.AddField(
            model_name='applicant',
            name='ward',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='residents', to='main_application.ward'),
        ),
        migrations.AlterUniqueTogether(
            name='constituency',
            unique_together={('name', 'county')},
        ),
        migrations.AlterUniqueTogether(
            name='disbursementround',
            unique_together={('fiscal_year', 'round_number')},
        ),
        migrations.CreateModel(
            name='DataSnapshot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('snapshot_date', models.DateField()),
                ('total_applications', models.PositiveIntegerField()),
                ('approved_applications', models.PositiveIntegerField()),
                ('rejected_applications', models.PositiveIntegerField()),
                ('pending_applications', models.PositiveIntegerField()),
                ('total_requested', models.DecimalField(decimal_places=2, max_digits=12)),
                ('total_allocated', models.DecimalField(decimal_places=2, max_digits=12)),
                ('total_disbursed', models.DecimalField(decimal_places=2, max_digits=12)),
                ('gender_distribution', models.JSONField()),
                ('ward_distribution', models.JSONField()),
                ('constituency_distribution', models.JSONField()),
                ('institution_distribution', models.JSONField()),
                ('category_distribution', models.JSONField()),
                ('average_amount_requested', models.DecimalField(decimal_places=2, max_digits=10)),
                ('average_amount_allocated', models.DecimalField(decimal_places=2, max_digits=10)),
                ('approval_rate', models.DecimalField(decimal_places=2, max_digits=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('fiscal_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.fiscalyear')),
            ],
            options={
                'ordering': ['-snapshot_date'],
                'unique_together': {('snapshot_date', 'fiscal_year')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='location',
            unique_together={('name', 'ward')},
        ),
        migrations.CreateModel(
            name='WardAllocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allocated_amount', models.DecimalField(decimal_places=2, help_text='Total amount allocated to this ward for the year', max_digits=12)),
                ('spent_amount', models.DecimalField(decimal_places=2, default=0, help_text='Amount disbursed so far', max_digits=12)),
                ('beneficiaries_count', models.PositiveIntegerField(default=0)),
                ('fiscal_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ward_allocations', to='main_application.fiscalyear')),
                ('ward', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='allocations', to='main_application.ward')),
            ],
            options={
                'ordering': ['fiscal_year', 'ward'],
                'unique_together': {('fiscal_year', 'ward')},
            },
        ),
    ]
